{"version":3,"sources":["Components/Editor.js","Components/Preview.js","Components/Wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","className","boxToolbarClassNames","id","icon","whichIcon","onClick","onArrowClick","title","role","tabIndex","onKeyPress","editorClassNames","rows","boxHeight","onChange","onEdit","defaultValue","stateText","Preview","dangerouslySetInnerHTML","__html","marked","renderedText","setOptions","breaks","Wrapper","state","text","expanded","boxToolbarClassString","editorClassString","iconName","faExpandArrowsAlt","numRows","handleChange","bind","toggleExpand","input","this","setState","target","value","faCompressArrowsAlt","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8ZAOe,SAASA,EAAQC,GAE5B,OACA,gCACE,qBAAKC,UAAWD,EAAME,qBAAsBC,GAAG,cAA/C,SACG,cAAC,IAAD,CAAiBC,KAAMJ,EAAMK,UAAWJ,UAAU,cAAcK,QAASN,EAAMO,aAAcC,MAAM,uBAAuB,aAAW,uBAAuBC,KAAK,SAAS,eAAa,QAAQ,kBAAgB,uBAAuBC,SAAS,IAAIC,WAAYX,EAAMO,iBAEtQ,qBAAKN,UAAWD,EAAMY,iBAAkBT,GAAG,aAA3C,SACE,0BAAUF,UAAU,kDAAkDY,KAAMb,EAAMc,UAAWX,GAAG,SAASY,SAAUf,EAAMgB,OAAQC,aAAcjB,EAAMkB,iB,MCZhJ,SAASC,EAASnB,GAE7B,OACE,qBAAKC,UAAU,uDAAuDE,GAAG,UAAUiB,wBAAyB,CAACC,OAAQC,IAAOtB,EAAMuB,iB,iBCuCxID,IAAOE,WAAW,CAChBC,QAAQ,I,IAGWC,E,kDACjB,WAAY1B,GAAO,IAAD,8BAChB,cAAMA,IACD2B,MAAQ,CACXC,KA5CS,g+BA8CTC,UAAU,EACVC,sBAAuB,wGACvBC,kBAAmB,qFACnBC,SAAUC,IACVC,QAAS,MAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAZJ,E,gDAgBhB,SAAaE,GACbC,KAAKC,SAAS,CAACZ,KAAMU,EAAMG,OAAOC,U,0BAGlC,WACEH,KAAKC,SAAS,CAACX,UAAkC,IAAxBU,KAAKZ,MAAME,SAAkCC,uBAA+C,IAAxBS,KAAKZ,MAAME,SAAoB,iHAChI,wGAA0GG,UAAkC,IAAxBO,KAAKZ,MAAME,SAAoBc,IAAsDV,IAAiDF,mBAA2C,IAAxBQ,KAAKZ,MAAME,SAAoB,2EAA6E,qFAAsFK,SAAiC,IAAxBK,KAAKZ,MAAME,SAAoB,KAAO,S,oBAG9f,WACE,OACA,sBAAK5B,UAAU,OAAf,UACA,cAAC,EAAD,CAAQe,OAAQuB,KAAKJ,aAAcjB,UAAWqB,KAAKZ,MAAMC,KAAMrB,aAAcgC,KAAKF,aAAchC,UAAWkC,KAAKZ,MAAMK,SAAU9B,qBAAsBqC,KAAKZ,MAAMG,sBAAuBlB,iBAAkB2B,KAAKZ,MAAMI,kBAAmBjB,UAAWyB,KAAKZ,MAAMO,UAC9P,cAAC,EAAD,CAASX,aAAcgB,KAAKZ,MAAMC,KAAMzB,GAAG,mB,GA9BZyC,IAAMC,WCrC5BC,MARf,WACE,OACE,qBAAK7C,UAAW,WAAhB,SACE,cAAC,EAAD,OCKS8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8e4d2b95.chunk.js","sourcesContent":["import '../Styles/Editor.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n/*import { faExpandArrowsAlt, faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons'; */\r\n/*IMPORT BOOTSTRAP HERE AS WELL? And in Preview component*/\r\n\r\n\r\n\r\nexport default function Editor (props) {\r\n  \r\n    return(\r\n    <div>\r\n      <div className={props.boxToolbarClassNames} id=\"box-toolbar\">\r\n         <FontAwesomeIcon icon={props.whichIcon} className=\"arrows-icon\" onClick={props.onArrowClick} title=\"resize editor window\" aria-label=\"resize editor window\" role=\"button\" aria-pressed=\"false\" aria-labelledby=\"resize editor window\" tabIndex=\"0\" onKeyPress={props.onArrowClick}/>\r\n        </div>\r\n        <div className={props.editorClassNames} id=\"editor-box\">\r\n          <textarea className=\"form-control border border-dark mx-auto rounded\" rows={props.boxHeight} id=\"editor\" onChange={props.onEdit} defaultValue={props.stateText}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n}","import marked from 'marked';\r\nimport '../Styles/Preview.css';\r\n\r\nexport default function Preview (props) {\r\n  \r\n    return (\r\n      <div className=\"container-fluid border border-dark rounded col-xs-12\" id=\"preview\" dangerouslySetInnerHTML={{__html: marked(props.renderedText)}}>\r\n      </div>\r\n    );\r\n}","import React from 'react';\r\nimport marked from 'marked';\r\nimport Editor from './Editor';\r\nimport Preview from './Preview';\r\nimport '../Styles/Wrapper.css';\r\nimport { faExpandArrowsAlt, faCompressArrowsAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nconst placeholder = `# Welcome to my Github Markdown Previewer!\r\n## This lets you type Github markdown in the box above,\r\n### and renders it in HTML.\r\n#### Look at all the cool stuff you can do:\r\nWatch me easily insert a [link](https://en.wikipedia.org/wiki/Hummingbird) to an article about hummingbirds.\r\nIf you want some inline code, \\`<p>Here you go!</p>\\`\r\nWhat about a multi-line block of code? No problem:\r\n\\`\\`\\`\r\nconst myFunction = () => {\r\nif (user.age > 12 && user.age < 20 ){\r\nreturn \"You are a teenager!\"\r\n} else {\r\nreturn \"You are not a teen.\"\r\n  }\r\n};  \r\n\\`\\`\\`\r\nNeed to create a list?\r\n- This\r\n- is\r\n     - not\r\n     - a\r\n- problem.\r\n1. There are numbered lists\r\n2. as well!\r\n\r\n> Insert a blockquote\r\n> by someone you admire.\r\n\r\nOr try a cute puppy image:\r\n ![Cute black puppy](https://picsum.photos/id/237/200/300)\r\n\r\n*Try italicizing your text.*\r\n**Be bold!** And have fun.\r\n\r\n(For a cheat sheet of markdown rules, check out this [link](https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf)).`\r\n\r\nmarked.setOptions({\r\n  breaks: true\r\n});\r\n\r\nexport default class Wrapper extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        text: placeholder,\r\n        //setting this.state.expanded to true makes the first click work properly.\r\n        expanded: true,\r\n        boxToolbarClassString: \"d-none d-sm-flex flex-row justify-content-end p-1 border border-dark rounded-top col-sm-8 offset-sm-2\",\r\n        editorClassString: \"container form-group rounded-bottom border border-dark p-1 col-sm-8 col-xs-12 mb-3\",\r\n        iconName: faExpandArrowsAlt/*\"fas fa-expand-arrows-alt\"*/,\r\n        numRows: \"10\"\r\n        }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.toggleExpand = this.toggleExpand.bind(this);\r\n        }\r\n      \r\n     //change preview text to reflect editor input\r\n      handleChange(input) {\r\n      this.setState({text: input.target.value});\r\n      }\r\n    //change the size of the editor box by toggling classes\r\n      toggleExpand() {\r\n        this.setState({expanded: this.state.expanded === true ? false : true, boxToolbarClassString: this.state.expanded === true ? \"d-none d-sm-flex flex-row justify-content-end p-1 border border-dark rounded-top col-sm-12 mw-100 expanded-box\"\r\n  : \"d-none d-sm-flex flex-row justify-content-end p-1 border border-dark rounded-top col-sm-8 offset-sm-2\",  iconName: this.state.expanded === true ? faCompressArrowsAlt/*\"fas fa-compress-arrows-alt\"*/ : faExpandArrowsAlt/*\"fas fa-expand-arrows-alt\"*/, editorClassString: this.state.expanded === true ? \"d-flex rounded-bottom border border-dark p-1 col-xs-12 mb-3 w-100 mw-100\" : \"container form-group rounded-bottom border border-dark p-1 col-sm-8 col-xs-12 mb-3\", numRows: this.state.expanded === true ? \"20\" : \"10\" });\r\n      }\r\n      \r\n    render(){\r\n      return (\r\n      <div className=\"mt-3\">\r\n      <Editor onEdit={this.handleChange} stateText={this.state.text} onArrowClick={this.toggleExpand} whichIcon={this.state.iconName} boxToolbarClassNames={this.state.boxToolbarClassString} editorClassNames={this.state.editorClassString} boxHeight={this.state.numRows}/>\r\n      <Preview renderedText={this.state.text} id=\"preview\" />\r\n      </div>\r\n      );\r\n      }\r\n    }","\nimport './App.css';\nimport Wrapper from './Components/Wrapper.js';\n\nfunction App() {\n  return (\n    <div className={\"App mb-2\"}>\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Styles/custom.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}